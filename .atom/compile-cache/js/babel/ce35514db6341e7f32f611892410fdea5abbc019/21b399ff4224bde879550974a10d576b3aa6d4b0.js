Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _helpersUnits = require('../helpers/units');

var _helpersUnits2 = _interopRequireDefault(_helpersUnits);

'use babel';

var trailingWhitespace = /\s$/;
var attributeInput = /^([a-zA-Z][-a-zA-Z]*)$/;
var attributePattern = /\s+([a-zA-Z][-a-zA-Z]*)\s*=\s*$/;
var tagInput = /^<([a-zA-Z][-a-zA-Z]*|$)/;
var tagNotInput = />([a-zA-Z][-a-zA-Z]*|$)/;
var tagPattern = /<([a-zA-Z][-a-zA-Z]*)(?:\s|$)/;
var completions = require('../../completions/components');

exports['default'] = {
  getTagNameCompletions: function getTagNameCompletions() {
    var _completions = [];
    completions.tags.completions.forEach(function (obj) {
      _completions.push(_helpersUnits2['default'].clone(obj));
    });

    return _completions;
  },
  getAttributeNameCompletions: function getAttributeNameCompletions(editor, bufferPosition) {
    var _completions = [];
    var tag = this.getPreviousTag(editor, bufferPosition);

    if (completions.attributes.tags[tag]) {
      completions.attributes.tags[tag].forEach(function (attr) {
        completions.attributes.completions[attr].forEach(function (obj) {
          _completions.push(_helpersUnits2['default'].clone(obj));
        });
      });
    }

    completions.attributes.global.forEach(function (attr) {
      completions.attributes.completions[attr].forEach(function (obj) {
        _completions.push(_helpersUnits2['default'].clone(obj));
      });
    });

    return _completions;
  },
  getAttributeValueCompletions: function getAttributeValueCompletions(line) {
    var _completions = [],
        attribute = this.getPreviousAttribute(line);

    if (completions.values[attribute]) {
      completions.values[attribute].forEach(function (text) {
        _completions.push({
          "text": text,
          "type": "value"
        });
      });
    }
    return _completions;
  },
  getPreviousTag: function getPreviousTag(editor, bufferPosition) {
    var ref;
    var row = bufferPosition.row;

    while (row >= 0) {
      ref = tagPattern.exec(editor.lineTextForBufferRow(row));
      if (ref) {
        return ref[1];
      }
      row--;
    }
    return null;
  },
  getPreviousAttribute: function getPreviousAttribute(line) {
    var ref, ref1;
    var quoteIndex = line.length - 1;

    while (line[quoteIndex] && !((ref = line[quoteIndex]) === '"' || ref === "'")) {
      quoteIndex--;
    }
    line = line.substring(0, quoteIndex);
    return (ref1 = attributePattern.exec(line)) != null ? ref1[1] : null;
  },
  isAttributeValue: function isAttributeValue(scopes) {
    return this.hasTagScope(scopes) && this.hasAttributeValueScope(scopes) && !this.hasAttributeContentScope(scopes);
  },
  isAttribute: function isAttribute(prefix, scopes) {
    if (!trailingWhitespace.test(prefix) && !attributeInput.test(prefix)) {
      return false;
    }
    return this.hasTagScope(scopes) && !this.hasAttributeContentScope(scopes);
  },
  isTag: function isTag(scopes, line) {
    var segment = line.split(' ').pop();

    return tagInput.test(segment) && !tagNotInput.test(segment) && !this.hasScopeDescriptor(scopes, ['string.quoted.double.js', 'string.quoted.single.js']) && !this.hasAttributeContentScope(scopes);
  },
  hasTagScope: function hasTagScope(scopes) {
    return this.hasScopeDescriptor(scopes, ['meta.tag.any.html', 'meta.tag.other.html', 'meta.tag.block.any.html', 'meta.tag.inline.any.html', 'meta.tag.structure.any.html']);
  },
  hasAttributeValueScope: function hasAttributeValueScope(scopes) {
    return this.hasScopeDescriptor(scopes, ['string.quoted.double.html', 'string.quoted.single.html']);
  },
  hasAttributeContentScope: function hasAttributeContentScope(scopes) {
    return this.hasScopeDescriptor(scopes, ['punctuation.definition.brace.curly.begin.js', 'punctuation.definition.brace.curly.end.js', 'meta.brace.curly.js']);
  },
  hasScopeDescriptor: function hasScopeDescriptor(fromScopes, toScopes) {
    for (var scope of toScopes) {
      if (typeof scope === 'string') {
        if (fromScopes.indexOf(scope) !== -1) {
          return true;
        }
      } else {
        var pass = false;
        for (var text of fromScopes) {
          if (scope.test(text)) {
            pass = true;
          }
        }
        if (pass) return true;
      }
    }
    return false;
  }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,