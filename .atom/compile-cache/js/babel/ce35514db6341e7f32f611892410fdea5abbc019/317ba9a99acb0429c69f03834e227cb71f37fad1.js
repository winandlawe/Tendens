Object.defineProperty(exports, "__esModule", {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _electron = require("electron");

var _grammarUtils = require("../grammar-utils");

var _grammarUtils2 = _interopRequireDefault(_grammarUtils);

"use babel";

var DOT = {
  "Selection Based": {
    command: "dot",
    args: function args(context) {
      var code = context.getCode();
      var tmpFile = _grammarUtils2["default"].createTempFileWithCode(code, ".dot");
      return ["-Tpng", tmpFile, "-o", tmpFile + ".png"];
    }
  },

  "File Based": {
    command: "dot",
    args: function args(_ref) {
      var filepath = _ref.filepath;

      return ["-Tpng", filepath, "-o", filepath + ".png"];
    }
  }
};

var gnuplot = {
  "File Based": {
    command: "gnuplot",
    workingDirectory: _grammarUtils2["default"].workingDirectory(),
    args: function args(_ref2) {
      var filepath = _ref2.filepath;

      return ["-p", filepath];
    }
  }
};

var Graphviz = {
  "Selection Based": {
    command: "dot",
    args: function args(context) {
      var code = context.getCode();
      var tmpFile = _grammarUtils2["default"].createTempFileWithCode(code, ".dot");
      return ["-Tpng", tmpFile, "-o", tmpFile + ".png"];
    }
  },

  "File Based": {
    command: "dot",
    args: function args(_ref3) {
      var filepath = _ref3.filepath;

      return ["-Tpng", filepath, "-o", filepath + ".png"];
    }
  }
};

var HTML = {
  "File Based": {
    command: "echo",
    args: function args(_ref4) {
      var filepath = _ref4.filepath;

      var uri = "file://" + filepath;
      _electron.shell.openExternal(uri);
      return ["HTML file opened at:", uri];
    }
  }
};

var LaTeX = {
  "File Based": {
    command: "latexmk",
    args: function args(_ref5) {
      var filepath = _ref5.filepath;

      return ["-cd", "-quiet", "-pdf", "-pv", "-shell-escape", filepath];
    }
  }
};

var ConTeXt = {
  "File Based": {
    command: "context",
    args: function args(_ref6) {
      var filepath = _ref6.filepath;

      return ["--autopdf", "--nonstopmode", "--synctex", "--noconsole", filepath];
    }
  }
};

var LaTeXBeamer = LaTeX;

var PandocMarkdown = {
  "File Based": {
    command: "panzer",
    args: function args(_ref7) {
      var filepath = _ref7.filepath;

      return [filepath, "--output='" + filepath + ".pdf'"];
    }
  }
};

var Sass = {
  "File Based": {
    command: "sass",
    args: function args(_ref8) {
      var filepath = _ref8.filepath;

      return [filepath];
    }
  }
};

var SCSS = Sass;

var Docs = {
  DOT: DOT,
  GNUPlot: gnuplot,
  gnuplot: gnuplot,
  "Graphviz (DOT)": Graphviz,
  HTML: HTML,
  LaTeX: LaTeX,
  ConTeXt: ConTeXt,
  "LaTeX Beamer": LaTeXBeamer,
  "Pandoc Markdown": PandocMarkdown,
  Sass: Sass,
  SCSS: SCSS
};
exports["default"] = Docs;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vQzovVXNlcnMvY2tuanUvLmF0b20vcGFja2FnZXMvc2NyaXB0L2xpYi9ncmFtbWFycy9kb2MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O3dCQUVzQixVQUFVOzs0QkFDUCxrQkFBa0I7Ozs7QUFIM0MsV0FBVyxDQUFBOztBQUtYLElBQU0sR0FBRyxHQUFHO0FBQ1YsbUJBQWlCLEVBQUU7QUFDakIsV0FBTyxFQUFFLEtBQUs7QUFDZCxRQUFJLEVBQUEsY0FBQyxPQUFPLEVBQUU7QUFDWixVQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDOUIsVUFBTSxPQUFPLEdBQUcsMEJBQWEsc0JBQXNCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQ2pFLGFBQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBSyxPQUFPLFVBQU8sQ0FBQTtLQUNsRDtHQUNGOztBQUVELGNBQVksRUFBRTtBQUNaLFdBQU8sRUFBRSxLQUFLO0FBQ2QsUUFBSSxFQUFBLGNBQUMsSUFBWSxFQUFFO1VBQVosUUFBUSxHQUFWLElBQVksQ0FBVixRQUFROztBQUNiLGFBQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBSyxRQUFRLFVBQU8sQ0FBQTtLQUNwRDtHQUNGO0NBQ0YsQ0FBQTs7QUFFRCxJQUFNLE9BQU8sR0FBRztBQUNkLGNBQVksRUFBRTtBQUNaLFdBQU8sRUFBRSxTQUFTO0FBQ2xCLG9CQUFnQixFQUFFLDBCQUFhLGdCQUFnQixFQUFFO0FBQ2pELFFBQUksRUFBQSxjQUFDLEtBQVksRUFBRTtVQUFaLFFBQVEsR0FBVixLQUFZLENBQVYsUUFBUTs7QUFDYixhQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0tBQ3hCO0dBQ0Y7Q0FDRixDQUFBOztBQUVELElBQU0sUUFBUSxHQUFHO0FBQ2YsbUJBQWlCLEVBQUU7QUFDakIsV0FBTyxFQUFFLEtBQUs7QUFDZCxRQUFJLEVB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Z3JhbW1hcnMvZG9jLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgYmFiZWxcIlxuXG5pbXBvcnQgeyBzaGVsbCB9IGZyb20gXCJlbGVjdHJvblwiXG5pbXBvcnQgR3JhbW1hclV0aWxzIGZyb20gXCIuLi9ncmFtbWFyLXV0aWxzXCJcblxuY29uc3QgRE9UID0ge1xuICBcIlNlbGVjdGlvbiBCYXNlZFwiOiB7XG4gICAgY29tbWFuZDogXCJkb3RcIixcbiAgICBhcmdzKGNvbnRleHQpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSBjb250ZXh0LmdldENvZGUoKVxuICAgICAgY29uc3QgdG1wRmlsZSA9IEdyYW1tYXJVdGlscy5jcmVhdGVUZW1wRmlsZVdpdGhDb2RlKGNvZGUsIFwiLmRvdFwiKVxuICAgICAgcmV0dXJuIFtcIi1UcG5nXCIsIHRtcEZpbGUsIFwiLW9cIiwgYCR7dG1wRmlsZX0ucG5nYF1cbiAgICB9LFxuICB9LFxuXG4gIFwiRmlsZSBCYXNlZFwiOiB7XG4gICAgY29tbWFuZDogXCJkb3RcIixcbiAgICBhcmdzKHsgZmlsZXBhdGggfSkge1xuICAgICAgcmV0dXJuIFtcIi1UcG5nXCIsIGZpbGVwYXRoLCBcIi1vXCIsIGAke2ZpbGVwYXRofS5wbmdgXVxuICAgIH0sXG4gIH0sXG59XG5cbmNvbnN0IGdudXBsb3QgPSB7XG4gIFwiRmlsZSBCYXNlZFwiOiB7XG4gICAgY29tbWFuZDogXCJnbnVwbG90XCIsXG4gICAgd29ya2luZ0RpcmVjdG9yeTogR3JhbW1hclV0aWxzLndvcmtpbmdEaXJlY3RvcnkoKSxcbiAgICBhcmdzKHsgZmlsZXBhdGggfSkge1xuICAgICAgcmV0dXJuIFtcIi1wXCIsIGZpbGVwYXRoXVxuICAgIH0sXG4gIH0sXG59XG5cbmNvbnN0IEdyYXBodml6ID0ge1xuICBcIlNlbGVjdGlvbiBCYXNlZFwiOiB7XG4gICAgY29tbWFuZDogXCJkb3RcIixcbiAgICBhcmdzKGNvbnRleHQpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSBjb250ZXh0LmdldENvZGUoKVxuICAgICAgY29uc3QgdG1wRmlsZSA9IEdyYW1tYXJVdGlscy5jcmVhdGVUZW1wRmlsZVdpdGhDb2RlKGNvZGUsIFwiLmRvdFwiKVxuICAgICAgcmV0dXJuIFtcIi1UcG5nXCIsIHRtcEZpbGUsIFwiLW9cIiwgYCR7dG1wRmlsZX0ucG5nYF1cbiAgICB9LFxuICB9LFxuXG4gIFwiRmlsZSBCYXNlZFwiOiB7XG4gICAgY29tbWFuZDogXCJkb3RcIixcbiAgICBhcmdzKHsgZmlsZXBhdGggfSkge1xuICAgICAgcmV0dXJuIFtcIi1UcG5nXCIsIGZpbGVwYXRoLCBcIi1vXCIsIGAke2ZpbGVwYXRofS5wbmdgXVxuICAgIH0sXG4gIH0sXG59XG5cbmNvbnN0IEhUTUwgPSB7XG4gIFwiRmlsZSBCYXNlZFwiOiB7XG4gICAgY29tbWFuZDogXCJlY2hvXCIsXG4gICAgYXJncyh7IGZpbGVwYXRoIH0pIHtcbiAgICAgIGNvbnN0IHVyaSA9IGBmaWxlOi8vJHtmaWxlcGF0aH1gXG4gICAgICBzaGVsbC5vcGVuRXh0ZXJuYWwodXJpKVxuICAgICAgcmV0dXJuIFtcIkhUTUwgZmlsZSBvcGVuZWQgYXQ6XCIsIHVyaV1cbiAgICB9LFxuICB9LFxufVxuXG5jb25zdCBMYVRlWCA9IHtcbiAgXCJGaWxlIEJhc2VkXCI6IHtcbiAgICBjb21tYW5kOiBcImxhdGV4bWtcIixcbiAgICBhcmdzKHsgZmlsZXBhdGggfSkge1xuICAgICAgcmV0dXJuIFtcIi1jZFwiLCBcIi1xdWlldFwiLCBcIi1wZGZcIiwgXCItcHZcIiwgXCItc2hlbGwtZXNjYXBlXCIsIGZpbGVwYXRoXVxuICAgIH0sXG4gIH0sXG59XG5cbmNvbnN0IENvblRlWHQgPSB7XG4gIFwiRmlsZSBCYXNlZFwiOiB7XG4gICAgY29tbWFuZDogXCJjb250ZXh0XCIsXG4gICAgYXJncyh7IGZpbGVwYXRoIH0pIHtcbiAgICAgIHJldHVybiBbXCItLWF1dG9wZGZcIiwgXCItLW5vbnN0b3Btb2RlXCIsIFwiLS1zeW5jdGV4XCIsIFwiLS1ub2NvbnNvbGVcIiwgZmlsZXBhdGhdXG4gICAgfSxcbiAgfSxcbn1cblxuY29uc3QgTGFUZVhCZWFtZXIgPSBMYVRlWFxuXG5jb25zdCBQYW5kb2NNYXJrZG93biA9IHtcbiAgXCJGaWxlIEJhc2VkXCI6IHtcbiAgICBjb21tYW5kOiBcInBhbnplclwiLFxuICAgIGFyZ3MoeyBmaWxlcGF0aCB9KSB7XG4gICAgICByZXR1cm4gW2ZpbGVwYXRoLCBgLS1vdXRwdXQ9JyR7ZmlsZXBhdGh9LnBkZidgXVxuICAgIH0sXG4gIH0sXG59XG5cbmNvbnN0IFNhc3MgPSB7XG4gIFwiRmlsZSBCYXNlZFwiOiB7XG4gICAgY29tbWFuZDogXCJzYXNzXCIsXG4gICAgYXJncyh7IGZpbGVwYXRoIH0pIHtcbiAgICAgIHJldHVybiBbZmlsZXBhdGhdXG4gICAgfSxcbiAgfSxcbn1cblxuY29uc3QgU0NTUyA9IFNhc3NcblxuY29uc3QgRG9jcyA9IHtcbiAgRE9ULFxuICBHTlVQbG90OiBnbnVwbG90LFxuICBnbnVwbG90LFxuICBcIkdyYXBodml6IChET1QpXCI6IEdyYXBodml6LFxuICBIVE1MLFxuICBMYVRlWCxcbiAgQ29uVGVYdCxcbiAgXCJMYVRlWCBCZWFtZXJcIjogTGFUZVhCZWFtZXIsXG4gIFwiUGFuZG9jIE1hcmtkb3duXCI6IFBhbmRvY01hcmtkb3duLFxuICBTYXNzLFxuICBTQ1NTLFxufVxuZXhwb3J0IGRlZmF1bHQgRG9jc1xuIl19