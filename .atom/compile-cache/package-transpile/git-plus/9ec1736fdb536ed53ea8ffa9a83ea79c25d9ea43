"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Root = void 0;
const AnsiToHtml = require("ansi-to-html");
const atom_1 = require("atom");
const React = require("react");
const activity_logger_1 = require("../../activity-logger");
const Entry_1 = require("./Entry");
function reverseMap(array, fn) {
    const result = [];
    for (let i = array.length - 1; i > -1; i--) {
        result.push(fn(array[i], i));
    }
    return result;
}
class Root extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            latestId: null,
            records: [...activity_logger_1.default.records]
        };
        this.subscriptions = new atom_1.CompositeDisposable();
        this.$root = React.createRef();
        this.ansiConverter = new AnsiToHtml();
    }
    componentDidMount() {
        this.subscriptions.add(activity_logger_1.default.onDidRecordActivity(record => {
            this.setState(state => ({ latestId: record.id, records: [...state.records, record] }));
        }), atom.commands.add("atom-workspace", "git-plus:copy", {
            hiddenInCommandPalette: true,
            didDispatch: (event) => {
                if (event.target &&
                    event.target.contains(document.querySelector(".git-plus.output"))) {
                    atom.clipboard.write(window.getSelection().toString());
                }
                else
                    event.abortKeyBinding();
            }
        }));
        atom.keymaps.add("git-plus", {
            ".platform-darwin atom-workspace": {
                "cmd-c": "git-plus:copy"
            },
            ".platform-win32 atom-workspace, .platform-linux atom-workspace": {
                "ctrl-c": "git-plus:copy"
            }
        });
    }
    componentDidUpdate(previousProps, previousState) {
        if (previousState.records.length < this.state.records.length) {
            if (this.$root.current)
                this.$root.current.scrollTop = 0;
        }
    }
    componentWillUnmount() {
        this.subscriptions.dispose();
        atom.keymaps["removeBindingsFromSource"]("git-plus");
    }
    render() {
        return (React.createElement("div", { id: "root", ref: this.$root }, reverseMap(this.state.records, (record) => (React.createElement(Entry_1.Entry, { isLatest: this.state.latestId === record.id, key: record.id, record: record, ansiConverter: this.ansiConverter })))));
    }
}
exports.Root = Root;
//# sourceMappingURL=Root.js.map