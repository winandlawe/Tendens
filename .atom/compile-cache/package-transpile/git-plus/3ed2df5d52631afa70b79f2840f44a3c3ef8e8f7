"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Repository = exports.StashCommands = void 0;
const path = require("path");
const git_es_1 = require("./git-es");
exports.StashCommands = {
    Apply: { name: "apply", pastTense: "applied", presentTense: "applying" },
    Pop: { name: "pop", pastTense: "popped", presentTense: "popping" },
    Drop: { name: "drop", pastTense: "dropped", presentTense: "dropping" }
};
class Repository {
    constructor(repo) {
        this.repo = repo;
    }
    static async getCurrent() {
        const repo = await git_es_1.getRepo();
        return repo ? new Repository(repo) : undefined;
    }
    static async getForPath(path) {
        const repo = await git_es_1.getRepoForPath(path);
        return repo ? new Repository(repo) : undefined;
    }
    getWorkingDirectory() {
        return this.repo.getWorkingDirectory();
    }
    stage(paths, options = { update: false }) {
        const args = ["add"];
        if (options.update)
            args.push("--update");
        else
            args.push("--all");
        args.push(...paths);
        return git_es_1.default(args, { cwd: this.repo.getWorkingDirectory() });
    }
    getName() {
        return path.basename(this.repo.getWorkingDirectory());
    }
    async getBranchesForRemote(remote) {
        const { failed, output } = await git_es_1.default(["branch", "-r", "--no-color"], {
            cwd: this.repo.getWorkingDirectory()
        });
        if (failed)
            return [];
        const branches = [];
        output.split("\n").forEach(ref => {
            ref = ref.trim();
            if (ref.startsWith(`${remote}/`) && !ref.includes("/HEAD")) {
                branches.push(ref.substring(ref.indexOf("/") + 1));
            }
        });
        return branches;
    }
    async getRemoteNames() {
        const { failed, output } = await git_es_1.default(["remote"], { cwd: this.repo.getWorkingDirectory() });
        if (failed)
            return [];
        return output.split("\n").filter(Boolean);
    }
    async getStashes() {
        const { failed, output } = await git_es_1.default(["stash", "list"], {
            cwd: this.repo.getWorkingDirectory()
        });
        if (failed)
            return [];
        return output
            .split("\n")
            .filter(Boolean)
            .map(stashInfo => {
            const [indexInfo, ...rest] = stashInfo.split(":");
            const indexMatch = indexInfo.match(/\d+/);
            if (!indexMatch)
                return null;
            return { index: indexMatch[0], label: rest.join().trim(), content: stashInfo };
        })
            .filter(Boolean);
    }
    actOnStash(stash, command) {
        const args = ["stash", command.name, stash.index];
        return git_es_1.default(args, { cwd: this.repo.getWorkingDirectory() });
    }
    fetch(remote, options = {}) {
        const args = ["fetch", remote || "--all"];
        if (options.prune)
            args.push("--prune");
        return git_es_1.default(args, { cwd: this.repo.getWorkingDirectory(), color: true });
    }
    pull(options = {}) {
        const args = ["pull"];
        if (options.autostash)
            args.push("--autostash");
        if (options.rebase)
            args.push("--rebase");
        if (options.remote)
            args.push(options.remote);
        if (options.branch)
            args.push(options.branch);
        return git_es_1.default(args, { cwd: this.repo.getWorkingDirectory() });
    }
    push(options = {}) {
        const args = ["push"];
        if (options.setUpstream)
            args.push("--set-upstream");
        if (options.remote)
            args.push(options.remote);
        if (options.branch)
            args.push(options.branch);
        return git_es_1.default(args, { cwd: this.repo.getWorkingDirectory() });
    }
    refresh() {
        this.repo.refreshIndex();
        this.repo.refreshStatus();
    }
    relativize(path) {
        if (path === this.getWorkingDirectory())
            return this.getName();
        return this.repo.relativize(path);
    }
    reset() {
        return git_es_1.default(["reset", "HEAD"], { cwd: this.repo.getWorkingDirectory() });
    }
    async resetChanges(path) {
        const result = await git_es_1.default(["checkout", "--", path], { cwd: this.repo.getWorkingDirectory() });
        this.refresh();
        return result;
    }
    async isPathStaged(path) {
        const result = await git_es_1.default(["diff", "--cached", "--name-only", path], {
            cwd: this.repo.getWorkingDirectory()
        });
        if (path === this.getWorkingDirectory() && result.output !== "")
            return true;
        return result.output.includes(this.relativize(path));
    }
    isPathModified(path) {
        return this.repo.isPathModified(path);
    }
    async getUpstreamBranchFor(branch) {
        const result = await git_es_1.default(["rev-parse", "--abbrev-ref", `${branch}@{upstream}`], {
            cwd: this.repo.getWorkingDirectory()
        });
        if (result.failed && result.output.includes("fatal: no upstream configured"))
            return null;
        else
            return result.output.split("/");
    }
    async unstage(path) {
        return await git_es_1.default(["reset", path], { cwd: this.repo.getWorkingDirectory() });
    }
}
exports.default = Repository;
exports.Repository = Repository;
//# sourceMappingURL=repository.js.map