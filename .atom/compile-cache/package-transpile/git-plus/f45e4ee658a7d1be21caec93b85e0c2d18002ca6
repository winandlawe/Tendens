"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const SelectList = require("atom-select-list");
class ListView {
    constructor(remotes, options = {}) {
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.isAttached = false;
        this.destroy = () => {
            this.disposables.dispose();
        };
        this.listView = new SelectList(Object.assign({ items: remotes.map(remote => ({
                name: remote
            })), emptyMessage: "No remotes for this repository", filterKeyForItem: item => item.name, elementForItem: (item, _options) => {
                const li = document.createElement("li");
                li.textContent = item.name;
                return li;
            }, didCancelSelection: () => {
                this.destroy();
                this.emitter.emit("did-cancel", "User aborted");
            }, didConfirmSelection: item => {
                this.emitter.emit("did-confirm", item.name);
                this.destroy();
            } }, options));
        this.disposables.add(new atom_1.Disposable(() => this.listView.destroy()));
        this.result = new Promise((resolve, reject) => {
            this.emitter.once("did-cancel", reject);
            this.emitter.once("did-confirm", resolve);
        });
        this.attach();
    }
    attach() {
        this.previouslyFocusedElement = document.activeElement;
        this.panel = atom.workspace.addModalPanel({ item: this.listView.element });
        this.listView.focus();
        this.isAttached = true;
        this.disposables.add(new atom_1.Disposable(() => {
            this.panel.destroy();
            this.previouslyFocusedElement && this.previouslyFocusedElement.focus();
        }));
    }
}
exports.default = ListView;
//# sourceMappingURL=list-view.js.map