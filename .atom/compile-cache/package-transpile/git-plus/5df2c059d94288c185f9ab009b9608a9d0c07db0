"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const SelectList = require("atom-select-list");
class RepoListView {
    constructor(repos) {
        this.disposables = new atom_1.CompositeDisposable();
        this.isAttached = false;
        this.destroy = () => {
            this.disposables.dispose();
        };
        this.emitter = new atom_1.Emitter();
        this.list = new SelectList({
            items: repos.map(repository => {
                const path = repository.getWorkingDirectory();
                return {
                    repo: repository,
                    name: path.substring(path.lastIndexOf("/") + 1)
                };
            }),
            filterKeyForItem(item) {
                return item.name;
            },
            infoMessage: "Which Repo?",
            elementForItem(item, _options) {
                const li = document.createElement("li");
                li.textContent = item.name;
                return li;
            },
            didCancelSelection: () => {
                this.destroy();
                this.emitter.emit("did-cancel", "User aborted");
            },
            didConfirmSelection: item => {
                this.emitter.emit("did-confirm", item.repo);
                this.destroy();
            }
        });
        this.result = new Promise((resolve, reject) => {
            this.emitter.once("did-cancel", reject);
            this.emitter.once("did-confirm", resolve);
        });
        this.disposables.add(new atom_1.Disposable(() => {
            this.list.destroy();
            this.emitter.dispose();
        }));
        this.attach();
    }
    attach() {
        this.previouslyFocusedElement = document.activeElement;
        this.panel = atom.workspace.addModalPanel({ item: this.list.element });
        this.list.focus();
        this.isAttached = true;
        this.disposables.add(new atom_1.Disposable(() => {
            this.panel.destroy();
            this.previouslyFocusedElement && this.previouslyFocusedElement.focus();
        }));
    }
}
exports.default = async (repos) => {
    return new RepoListView(repos).result;
};
//# sourceMappingURL=choose-repo.js.map