"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRepoForPath = exports.getRepo = void 0;
const atom_1 = require("atom");
const fs = require("fs");
const Path = require("path");
const choose_repo_1 = require("./models/choose-repo");
const reposByDirectory = new Map();
const getRepoForDirectory = async (directory) => {
    const repo = await atom.project.repositoryForDirectory(directory);
    if (repo) {
        reposByDirectory.set(directory, repo);
        return repo;
    }
};
const getCachedRepo = (path) => {
    const iterator = reposByDirectory.entries();
    let entry = iterator.next();
    while (!entry.done) {
        const [directory, repo] = entry.value;
        if (directory.contains(path)) {
            if (repo.isDestroyed()) {
                reposByDirectory.delete(directory);
                return undefined;
            }
            else
                return repo;
        }
        entry = iterator.next();
    }
};
async function getRepo() {
    const activeEditor = atom.workspace.getCenter().getActiveTextEditor();
    if (activeEditor) {
        const path = activeEditor.getPath();
        if (path) {
            let repo = getCachedRepo(path);
            if (repo)
                return repo;
            const directory = new atom_1.File(path).getParent();
            repo = await getRepoForDirectory(directory);
            if (repo)
                return repo;
        }
    }
    const repos = (await Promise.all(atom.project.getDirectories().map(getRepoForDirectory)).then(results => results.filter(Boolean)));
    if (repos.length === 0)
        return undefined;
    if (repos.length === 1)
        return repos[0];
    if (repos.length > 1)
        return choose_repo_1.default(repos);
}
exports.getRepo = getRepo;
exports.getRepoForPath = async (path) => {
    const repo = getCachedRepo(path);
    if (repo)
        return repo;
    const stat = fs.statSync(path);
    const directory = new atom_1.Directory(stat.isFile() ? Path.dirname(path) : path);
    return await getRepoForDirectory(directory);
};
const defaultCmdOptions = { color: false, env: process.env };
async function cmd(args, options = defaultCmdOptions) {
    if (options.color) {
        args = ["-c", "color.ui=always"].concat(args);
        delete options.color;
    }
    return new Promise((resolve, reject) => {
        let output = "";
        const gitProcess = new atom_1.BufferedProcess({
            // $FlowFixMe
            command: atom.config.get("git-plus.general.gitPath") || "git",
            args,
            options,
            stdout: data => (output += data.toString()),
            stderr: data => (output += data.toString()),
            exit: code => {
                resolve({
                    output: output.trim(),
                    failed: code !== 0
                });
            }
        });
        // TODO: clean up the disposable from this subscription
        gitProcess.onWillThrowError(_error => {
            atom.notifications.addError("Git Plus is unable to locate the git command. Please ensure process.env.PATH can access git.");
            reject(Error("Couldn't find git"));
        });
    });
}
exports.default = cmd;
//# sourceMappingURL=git-es.js.map