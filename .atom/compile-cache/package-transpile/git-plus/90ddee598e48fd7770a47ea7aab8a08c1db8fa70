"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const activity_logger_1 = require("../activity-logger");
const repository_1 = require("../repository");
const list_view_1 = require("../views/list-view");
exports.default = async () => {
    const repo = await repository_1.default.getCurrent();
    if (!repo)
        return atom.notifications.addInfo("No repository found");
    const remotes = await repo.getRemoteNames();
    if (remotes.length === 0) {
        atom.notifications.addInfo("There is no remote repository to pull from.");
    }
    else {
        const shouldRebase = atom.config.get("git-plus.remoteInteractions.pullRebase") === true;
        const shouldAutostash = atom.config.get("git-plus.remoteInteractions.pullAutostash") === true;
        const pullOptions = { rebase: shouldRebase, autostash: shouldAutostash };
        if (atom.config.get("git-plus.remoteInteractions.promptForBranch") === true) {
            let chosenRemote;
            if (remotes.length === 1)
                chosenRemote = remotes[0];
            else
                chosenRemote = await new list_view_1.default(remotes).result;
            let chosenBranch;
            const branches = await repo.getBranchesForRemote(chosenRemote);
            if (branches.length === 1)
                chosenBranch = branches[0];
            else {
                chosenBranch = await new list_view_1.default(branches, {
                    infoMessage: `Select branch on ${chosenRemote}`
                }).result;
            }
            pullOptions.remote = chosenRemote;
            pullOptions.branch = chosenBranch;
        }
        const notification = atom.notifications.addInfo("Pulling...", { dismissable: true });
        const result = await repo.pull(pullOptions);
        activity_logger_1.default.record(Object.assign({ repoName: repo.getName(), message: `pull` }, result));
        notification.dismiss();
    }
};
//# sourceMappingURL=pull.js.map