"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const activity_logger_1 = require("../activity-logger");
const repository_1 = require("../repository");
const list_view_1 = require("../views/list-view");
exports.default = async (setUpstream = false) => {
    const repo = await repository_1.default.getCurrent();
    if (!repo)
        return atom.notifications.addInfo("No repository found");
    const repoName = repo.getName();
    const pushOptions = { setUpstream };
    const remotes = await repo.getRemoteNames();
    if (remotes.length === 0)
        atom.notifications.addInfo("There is no remote repository to push to.");
    else {
        if (setUpstream) {
            pushOptions.setUpstream = true;
            pushOptions.remote = remotes[0];
            pushOptions.branch = "HEAD";
        }
        else {
            if (atom.config.get("git-plus.remoteInteractions.promptForBranch")) {
                let chosenRemote;
                if (remotes.length === 1)
                    chosenRemote = remotes[0];
                else
                    chosenRemote = await new list_view_1.default(remotes).result;
                let chosenBranch;
                const branches = await repo.getBranchesForRemote(chosenRemote);
                if (branches.length === 1)
                    chosenBranch = branches[0];
                else {
                    chosenBranch = await new list_view_1.default(branches, {
                        infoMessage: `Select branch on ${chosenRemote}`
                    }).result;
                }
                pushOptions.remote = chosenRemote;
                pushOptions.branch = chosenBranch;
            }
            if (atom.config.get("git-plus.remoteInteractions.pullBeforePush")) {
                const result = await repo.pull({
                    rebase: atom.config.get("git-plus.remoteInteractions.pullRebase") === true,
                    autostash: atom.config.get("git-plus.remoteInteractions.pullAutostash") === true,
                    remote: pushOptions.remote,
                    branch: pushOptions.remote
                });
                activity_logger_1.default.record(Object.assign({ message: "pull before push", repoName }, result));
                if (result.failed)
                    return;
            }
        }
        const notification = atom.notifications.addInfo("Pushing...", { dismissable: true });
        const result = await repo.push(pushOptions);
        notification.dismiss();
        activity_logger_1.default.record(Object.assign({ message: `push`, repoName }, result));
    }
};
//# sourceMappingURL=push.js.map