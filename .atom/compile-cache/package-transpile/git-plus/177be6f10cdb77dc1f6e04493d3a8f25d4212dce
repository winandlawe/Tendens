"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const controller_1 = require("./views/controller");
const container_1 = require("./views/output-view/container");
// taken from: https://gist.github.com/jed/982883
const makeId = a => a
    ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)
    : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, makeId);
class ActivityLogger {
    constructor() {
        this.listeners = new Set();
        this._records = [];
    }
    get records() {
        return this._records;
    }
    record(attributes) {
        const record = Object.assign(Object.assign({}, attributes), { id: makeId() });
        if (record.failed &&
            !atom.config.get("git-plus.general.alwaysOpenDockWithResult") &&
            !controller_1.viewController.isVisible(container_1.OutputViewContainer.URI)) {
            atom.notifications.addError(`Unable to complete command: ${record.message}`, {
                detail: record.output,
                buttons: [
                    {
                        text: "Open Output View",
                        onDidClick: () => {
                            atom.commands.dispatch(document.querySelector("atom-workspace"), "git-plus:toggle-output-view");
                        }
                    }
                ]
            });
        }
        this._records.push(record);
        window.requestIdleCallback(() => {
            this.listeners.forEach(listener => listener(record));
            if (atom.config.get("git-plus.general.alwaysOpenDockWithResult")) {
                controller_1.viewController.getOutputView().show();
            }
        });
    }
    onDidRecordActivity(callback) {
        this.listeners.add(callback);
        return new atom_1.Disposable(() => this.listeners.delete(callback));
    }
}
const logger = new ActivityLogger();
exports.default = logger;
//# sourceMappingURL=activity-logger.js.map