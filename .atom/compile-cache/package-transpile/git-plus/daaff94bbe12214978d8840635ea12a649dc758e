"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unstage = exports.push = exports.pull = exports.diff = exports.diffTool = exports.diffBranches = exports.diffFileAgainstBranch = exports.checkoutFile = exports.addAndCommit = exports.add = void 0;
const activity_logger_1 = require("../activity-logger");
const repository_1 = require("../repository");
const GitCheckoutFile = require("./git-checkout-file");
const GitCommit = require("./git-commit");
const GitDiff = require("./git-diff");
const GitDiffAll = require("./git-diff-all");
const GitDiffBranchFiles = require("./git-diff-branch-files");
const GitDiffBranches = require("./git-diff-branches");
const GitDiffTool = require("./git-difftool");
const GitPull = require("./git-pull");
const GitPush = require("./git-push");
const logNoRepoFound = () => atom.notifications.addInfo("No repository found");
async function add(treeView) {
    const filesPerRepo = new Map();
    const paths = treeView.selectedPaths();
    await Promise.all(paths.map(async (path) => {
        const repo = await repository_1.default.getForPath(path);
        if (!repo) {
            return atom.notifications.addInfo(`No repository found for ${atom.project.relativizePath(path)[1]}`);
        }
        const files = filesPerRepo.get(repo.repo) || [];
        files.push(path);
        filesPerRepo.set(repo.repo, files);
    }));
    for (const [gitRepo, files] of filesPerRepo.entries()) {
        const repo = await new repository_1.default(gitRepo);
        const result = await repo.stage(files);
        let localizedPaths;
        if (files.length === 1 && files[0] === repo.getWorkingDirectory()) {
            localizedPaths = "all changes";
        }
        else
            localizedPaths = files.map(file => repo.relativize(file)).join(", ");
        activity_logger_1.default.record(Object.assign({ repoName: repo.getName(), message: `add ${localizedPaths}` }, result));
    }
}
exports.add = add;
async function addAndCommit(treeView) {
    await add(treeView);
    const [path] = treeView.selectedPaths();
    const repo = await repository_1.default.getForPath(path);
    if (!repo)
        return logNoRepoFound();
    GitCommit(repo.repo);
}
exports.addAndCommit = addAndCommit;
async function checkoutFile(treeView) {
    treeView.selectedPaths().forEach(async (path) => {
        const repo = await repository_1.default.getForPath(path);
        if (!repo)
            return atom.notifications.addWarning(`No repository found for \`${path}\``);
        const entry = treeView.entryForPath(path);
        if (entry.classList.contains("file") && !repo.isPathModified(path)) {
            return atom.notifications.addInfo(`\`${repo.relativize(path)}\` has no changes to reset.`);
        }
        if (await repo.isPathStaged(path)) {
            return atom.notifications.addWarning(`\`${repo.relativize(path)}\` can't be reset.`, {
                detail: "It has staged changes, which must be unstaged first"
            });
        }
        atom.confirm({
            message: `Are you sure you want to reset ${repo.relativize(path)} to HEAD`,
            buttons: {
                Yes: () => GitCheckoutFile(repo.repo, { file: path }),
                No: () => { }
            }
        });
    });
}
exports.checkoutFile = checkoutFile;
async function diffFileAgainstBranch(treeView) {
    const [path] = treeView.selectedPaths();
    const repo = await repository_1.default.getForPath(path);
    if (!repo)
        return atom.notifications.addWarning(`No repository found for \`${path}\``);
    GitDiffBranchFiles(repo.repo, path);
}
exports.diffFileAgainstBranch = diffFileAgainstBranch;
async function diffBranches(treeView) {
    const [path] = treeView.selectedPaths();
    const repo = await repository_1.default.getForPath(path);
    if (!repo)
        return atom.notifications.addWarning(`No repository found for \`${path}\``);
    GitDiffBranches(repo.repo);
}
exports.diffBranches = diffBranches;
async function diffTool(treeView) {
    const [path] = treeView.selectedPaths();
    const repo = await repository_1.default.getForPath(path);
    if (!repo)
        return atom.notifications.addWarning(`No repository found for ${path}`);
    if (!repo.isPathModified(path)) {
        return atom.notifications.addInfo(`\`${repo.relativize(path)}\` has no changes to diff`);
    }
    GitDiffTool(repo.repo, { file: repo.relativize(path) });
}
exports.diffTool = diffTool;
async function diff(treeView, all = false) {
    const [path] = treeView.selectedPaths();
    const repo = await repository_1.default.getForPath(path);
    if (!repo)
        return atom.notifications.addWarning(`No repository found for \`${path}\``);
    if (!all && !repo.isPathModified(path)) {
        return atom.notifications.addInfo(`\`${repo.relativize(path)}\` has no changes to diff`);
    }
    all ? GitDiffAll(repo.repo) : GitDiff(repo.repo, { file: repo.relativize(path) });
}
exports.diff = diff;
async function pull(treeView) {
    const paths = treeView.selectedPaths();
    const reposForPaths = await Promise.all(paths.map(repository_1.default.getForPath));
    const seenRepoDirectories = [];
    reposForPaths.forEach((repo, index) => {
        if (repo) {
            const repoDirectory = repo.getWorkingDirectory();
            if (!seenRepoDirectories.includes(repoDirectory)) {
                GitPull(repo.repo);
                seenRepoDirectories.push(repoDirectory);
            }
        }
        else {
            atom.notifications.addWarning(`No repository found for \`${paths[index]}\``);
        }
    });
}
exports.pull = pull;
async function push(treeView) {
    const paths = treeView.selectedPaths();
    const reposForPaths = await Promise.all(paths.map(repository_1.default.getForPath));
    const seenRepoDirectories = [];
    reposForPaths.forEach(async (repo, index) => {
        if (repo) {
            const repoDirectory = repo.getWorkingDirectory();
            if (!seenRepoDirectories.includes(repoDirectory)) {
                if ((await repo.getUpstreamBranchFor("HEAD")) === null) {
                    const notification = atom.notifications.addWarning(`The current branch \`${repo.repo.getShortHead()}\` has no upstream branch`, {
                        dismissable: true,
                        detail: "Do you want to create an upstream branch for it?",
                        buttons: [
                            {
                                text: "Yes",
                                onDidClick() {
                                    GitPush(repo.repo, { setUpstream: true });
                                    seenRepoDirectories.push(repoDirectory);
                                    notification.dismiss();
                                }
                            },
                            {
                                text: "No",
                                onDidClick() {
                                    notification.dismiss();
                                }
                            }
                        ]
                    });
                }
                else {
                    GitPush(repo.repo);
                    seenRepoDirectories.push(repoDirectory);
                }
            }
        }
        else {
            atom.notifications.addWarning(`No repository found for \`${paths[index]}\``);
        }
    });
}
exports.push = push;
function unstage(treeView) {
    treeView.selectedPaths().forEach(async (path) => {
        const repo = await repository_1.default.getForPath(path);
        if (!repo)
            return atom.notifications.addWarning(`No repository found for ${path}`);
        const pathIsStaged = await repo.isPathStaged(path);
        if (repo.getWorkingDirectory() !== path && !pathIsStaged) {
            return atom.notifications.addInfo(`\`${repo.relativize(path)}\` can't be unstaged.`, {
                detail: "This file has no staged changes"
            });
        }
        const result = await repo.unstage(path);
        activity_logger_1.default.record(Object.assign({ repoName: repo.getName(), message: `Unstage ${path}` }, result));
    });
}
exports.unstage = unstage;
//# sourceMappingURL=tree-view.js.map